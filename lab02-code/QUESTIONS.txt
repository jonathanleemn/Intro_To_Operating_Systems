                           __________________

                            LAB 02 QUESTIONS
                           __________________


- Name: (FILL THIS in)
- NetID: (THE kauf0095 IN kauf0095@umn.edu)

Answer the questions below according to the lab specification. Write
your answers directly in this text file and submit it to complete Lab01.


PROBLEM 1 `fork1.c'
===================

A
~

  Compile and run the program in `fork1.c'. Show it's output below.


Solution                                                      :solution:
--------

  ,----
  | > gcc fork1.c
  | > a.out
  | I am number 0, my pid is 13964
  | I am number 1, my pid is 13965
  | I am number 3, my pid is 13967
  | I am number 2, my pid is 13966
  | I am number 4, my pid is 13968
  | I am number 8, my pid is 13963
  | I am number 7, my pid is 13971
  | I am number 6, my pid is 13970
  | I am number 5, my pid is 13969
  `----


B
~

  Is the output ordered or disordered with respect to the "I am
  number..." statements? Why?


Solution                                                      :solution:
--------

  Disordered - children are scheduled to run in an unpredictable order
  so there are no guarantees as to which is run first.


C
~

  Add calls to the wait() or waitpid() function to ensure that the
  output is ordered. Paste your code below.


Solution                                                      :solution:
--------

  ,----
  | #include <stdio.h>
  | #include <unistd.h>
  | #include <sys/wait.h>
  | 
  | int main(void) {
  |   int i;
  |   for(i = 0; i<8; i++){
  |     pid_t child = fork();
  |     if(child == 0){
  |       break;
  |     }
  |     waitpid(child, NULL, 0);
  |     // int status;
  |     // waitpid(child, &status, 0);
  |   }
  |   printf("I am number %d, my pid is %d\n",i,getpid());
  |   return 0;
  | }
  `----


D
~

  How many parents and children are there in this program? What is their
  arrangement?


Solution                                                      :solution:
--------

  There is 1 parent and 8 children, total of 9 processes. All the
  children share the same parent, a Fan arrangement as described in
  Robbins.


PROBLEM 2 `fork-exec1.c'
========================

A
~

  Compile and run the program in `fork-exec1.c'. Show it's output below.


Solution                                                      :solution:
--------

  ,----
  | > gcc fork-exec1.c
  | > a.out
  | Running command 'ls'
  | ------------------
  | total 96K
  | drwxr-xr-x 2 kauffman kauffman 4.0K Sep 13 13:46 .
  | drwxr-xr-x 3 kauffman kauffman 4.0K Sep 13 13:47 ..
  | -rwxrwx--- 1 kauffman kauffman 8.5K Sep 13 13:46 a.out
  | -rw-r--r-- 1 kauffman kauffman  250 Sep 13 13:39 fork1.c
  | -rw-r--r-- 1 kauffman kauffman  228 Sep 13 13:28 fork1.c~
  | -rw-r--r-- 1 kauffman kauffman  333 Sep 13 13:40 fork1-fixed.c
  | -rw-r--r-- 1 kauffman kauffman  228 Sep 13 13:28 fork1-fixed.c~
  | -rw-r--r-- 1 kauffman kauffman  228 Sep 13 13:29 fork2.c
  | -rw-r--r-- 1 kauffman kauffman  244 Sep 13 13:25 fork2.c~
  | -rw-r--r-- 1 kauffman kauffman  372 Sep 13 13:46 fork-exec1.c
  | -rw-r--r-- 1 kauffman kauffman  229 Sep 13 13:43 fork-exec1.c~
  `----


B
~

  Adjust the contents of the `child_argv[]' array. Try remove the "-l"
  element, try adding on ".." prior to the final NULL, or make other
  modifications INCLUDING for the 0th "ls" string.  Recompile and
  describe whether the output has changed.


Solution                                                      :solution:
--------

  Changing elements adjust the options used by ls and will change how it
  is invoked. Changing ls itself has no effect.


C
~

  Change the child_cmd string from "ls" to be something else like "gcc"
  or "cat". Recompile ad explain what happens now.


Solution                                                      :solution:
--------

  The 0th argument is the command being run. The options in child_argv[]
  must match this command or errors may result.


D
~

  Currently `fork-exec1.c' does not reach the bottom statements.
  ,----
  |   printf("------------------\n");
  |   printf("Finished\n");
  `----
  Correct this by doing the following:
  - Fork a child process
  - Have ONLY the child process call execvp()
  - Have the parent process wait() for the child
  Paste your code below.


Solution                                                      :solution:
--------

  ,----
  | #include <stdio.h>
  | #include <stdlib.h>
  | #include <sys/wait.h>
  | #include <unistd.h>
  | 
  | int main(void){
  | 
  |   char *child_argv[] = {"ls","-l","-ah",NULL};
  |   char *child_cmd = "ls";
  | 
  |   printf("Running command '%s'\n",child_cmd);
  |   printf("------------------\n");
  | 
  |   pid_t pid = fork();
  |   if(pid == 0){
  |     execvp(child_cmd,child_argv);
  |   }
  |   wait(NULL);
  |   printf("------------------\n");
  |   printf("Finished\n");
  |   return 0;
  | }
  `----
